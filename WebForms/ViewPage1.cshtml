@using System;
@using System.Collections.Generic;
@using System.Data;
@using System.Linq;
@using System.Web;
@using System.Web.UI;
@using System.Web.UI.WebControls;
@using System.IO;
@using DocumentFormat.OpenXml;
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Spreadsheet;
@using System.Drawing.Imaging;
@using System.Drawing;

@{

    DataTable LoadExcelFile(string filePath1)
    {
        DataTable dt = new DataTable();

        // Open Excel file and read data
        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(filePath1, false))
        {
            WorkbookPart workbookPart = doc.WorkbookPart;
            WorksheetPart worksheetPart = workbookPart.WorksheetParts.FirstOrDefault();
            SheetData sheetData = worksheetPart.Worksheet.Elements<SheetData>().First();

            // Read header row
            Row headerRow = sheetData.Elements<Row>().First();
            foreach (Cell cell in headerRow.Elements<Cell>())
            {
                dt.Columns.Add(GetCellValue(doc, cell));
            }

            // Read data rows
            foreach (Row row in sheetData.Elements<Row>().Skip(1))
            {
                DataRow dataRow = dt.NewRow();
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    Cell cell = row.Elements<Cell>().ElementAt(i);
                    dataRow[i] = GetCellValue(doc, cell);
                }
                dt.Rows.Add(dataRow);
            }
        }

        return dt;
    }

    string GetCellValue(SpreadsheetDocument doc, Cell cell)
    {
        SharedStringTablePart stringTablePart = doc.WorkbookPart.SharedStringTablePart;
        string value = cell.CellValue.InnerText;
        if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
        {
            return stringTablePart.SharedStringTable.ChildElements[int.Parse(value)].InnerText;
        }
        return value;
    }

    string filePath = Server.MapPath("/WebForms/Budget.xlsx");
    DataTable dt1 = LoadExcelFile(filePath);

    var chart = new Chart(width: 600, height: 400, theme: ChartTheme.Blue)
        .AddTitle("Cost Chart")
        .SetXAxis("Project Name")
        .SetYAxis("Cost");

    chart.AddSeries(
        name: "Cost",
        chartType: "Column",
        xValue: dt1.AsEnumerable().Select(r => r.Field<string>("Project Name")).ToArray(),
        yValues: dt1.AsEnumerable().Select(r => r.Field<string>("Cost")).ToArray()
    );

    chart.Write();
}